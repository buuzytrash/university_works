; ModuleID = './ex.cpp'
source_filename = "./ex.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

module asm ".globl _ZSt21ios_base_library_initv"

%"class.std::basic_ostream" = type { ptr, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", ptr, i8, i8, ptr, ptr, ptr, ptr }
%"class.std::ios_base" = type { ptr, i64, i64, i32, i32, i32, ptr, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, ptr, %"class.std::locale" }
%"struct.std::ios_base::_Words" = type { ptr, i64 }
%"class.std::locale" = type { ptr }

@_ZTIi = external constant ptr
@_ZTId = external constant ptr
@_ZSt4cout = external global %"class.std::basic_ostream", align 8
@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

; Function Attrs: mustprogress noinline optnone uwtable
define dso_local noundef i32 @_Z3bari(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = load i32, ptr %2, align 4
  %4 = icmp eq i32 %3, 1
  br i1 %4, label %5, label %7

5:                                                ; preds = %1
  ; @@ memory for the exception is allocated
  %6 = call ptr @__cxa_allocate_exception(i64 4) #4
  ; copy exception data to allocated buffer
  store i32 1, ptr %6, align 16
  ; @@ Rise exception: ptr to the allocated exception, info about data, and a pointer to a destructor
  call void @__cxa_throw(ptr %6, ptr @_ZTIi, ptr null) #5
  ; @@
  unreachable

7:                                                ; preds = %1
  %8 = load i32, ptr %2, align 4
  %9 = icmp eq i32 %8, 2
  br i1 %9, label %10, label %12

10:                                               ; preds = %7
  %11 = call ptr @__cxa_allocate_exception(i64 8) #4
  store double 4.200000e+01, ptr %11, align 16
  call void @__cxa_throw(ptr %11, ptr @_ZTId, ptr null) #5
  unreachable

12:                                               ; preds = %7
  %13 = load i32, ptr %2, align 4
  ret i32 %13
}

declare ptr @__cxa_allocate_exception(i64)

declare void @__cxa_throw(ptr, ptr, ptr)

; Function Attrs: mustprogress noinline optnone uwtable
define dso_local noundef i32 @_Z3fooi(i32 noundef %0) #0 personality ptr @__gxx_personality_v0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca ptr, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  store i32 0, ptr %3, align 4
  
  %7 = load i32, ptr %2, align 4
  
  ; @@ invoke insted of call
  %8 = invoke noundef i32 @_Z3bari(i32 noundef %7)
          to label %9             ; normal termination with ret
          unwind label %10        ; termination with exception

9:                                                ; preds = %1
  store i32 %8, ptr %3, align 4
  br label %23

10:                                               ; preds = %1
  ; @@ landing pad -- basic block with landingpad instruction, gives LLVM information about the handled exception types.
  %11 = landingpad { ptr, i32 }
          catch ptr @_ZTIi      ; @@ exception types that can be handled

  %12 = extractvalue { ptr, i32 } %11, 0    ; extract pointer to the thrown exception
  store ptr %12, ptr %4, align 8
  %13 = extractvalue { ptr, i32 } %11, 1    ; extract type selector -- why the landing pad is called
  store i32 %13, ptr %5, align 4
  br label %14

14:                                               ; preds = %10
  %15 = load i32, ptr %5, align 4
  %16 = call i32 @llvm.eh.typeid.for(ptr @_ZTIi) #4
  %17 = icmp eq i32 %15, %16                      ; compare type selector with type @_ZTIi
  br i1 %17, label %18, label %25
  
18:                                               ; preds = %14
  ; @@ catch(int e)
  %19 = load ptr, ptr %4, align 8
  %20 = call ptr @__cxa_begin_catch(ptr %19) #4   ; returns pointer to exception data
  %21 = load i32, ptr %20, align 4
  store i32 %21, ptr %6, align 4
  %22 = load i32, ptr %6, align 4
  store i32 %22, ptr %3, align 4
  call void @__cxa_end_catch() #4                 ; deallocate memory
  br label %23

23:                                               ; preds = %18, %9
  %24 = load i32, ptr %3, align 4
  ret i32 %24

25:                                               ; preds = %14
  ; 
  %26 = load ptr, ptr %4, align 8
  %27 = load i32, ptr %5, align 4
  %28 = insertvalue { ptr, i32 } poison, ptr %26, 0
  %29 = insertvalue { ptr, i32 } %28, i32 %27, 1
  ; @@ resumes propagation of an existing (in-flight) exception whose unwinding was interrupted with a landingpad
  resume { ptr, i32 } %29
  ;
  ; libunwind drives the stack unwinding process
  ; __gxx_personality_v0() -- analyzes if the function catches an exception, has a non-matching filter list, or needs a cleanup call.
  ;
}

declare i32 @__gxx_personality_v0(...)

; Function Attrs: nounwind memory(none)
declare i32 @llvm.eh.typeid.for(ptr) #1

declare ptr @__cxa_begin_catch(ptr)

declare void @__cxa_end_catch()

; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main(i32 noundef %0, ptr noundef %1) #2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca ptr, align 8
  store i32 0, ptr %3, align 4
  store i32 %0, ptr %4, align 4
  store ptr %1, ptr %5, align 8

  %6 = load i32, ptr %4, align 4
  %7 = call noundef i32 @_Z3fooi(i32 noundef %6)

  %8 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %7)
  %9 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(ptr noundef nonnull align 8 dereferenceable(8) %8, ptr noundef @.str)
  ret i32 0
}

declare noundef nonnull align 8 dereferenceable(8) ptr @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(ptr noundef nonnull align 8 dereferenceable(8), ptr noundef) #3

declare noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8), i32 noundef) #3

attributes #0 = { mustprogress noinline optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind memory(none) }
attributes #2 = { mustprogress noinline norecurse optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"Ubuntu clang version 18.1.3 (1ubuntu1)"}
