#line 2 "CoolLexer.cpp"

#line 4 "CoolLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int CoolLexer::yylex()

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	(yytext_ptr) -= (yy_more_len); \
	yyleng = (int) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 68
#define YY_END_OF_BUFFER 69
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[652] =
    {   0,
       66,   66,   15,   15,   66,   66,    9,    9,   69,   67,
       66,   65,   12,   52,   53,   43,   44,   61,   45,   58,
       46,   64,   60,   59,   48,   47,   49,   63,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   54,
       55,   67,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   56,   57,   62,   15,   15,   13,   18,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   67,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   14,    2,    2,    3,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    9,    9,    8,   10,    9,   10,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   66,    4,    7,

        5,    1,   64,   40,   42,   50,   41,   51,   38,   38,
       38,   38,   38,   22,   23,   24,   38,   38,   38,   38,
       38,   35,   38,   38,   38,   39,   39,   39,   39,   39,
       39,   22,   23,   24,   39,   39,   39,   39,   39,   35,
       39,   39,   39,   39,   15,   15,    7,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       16,   17,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    9,    9,    6,   11,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,   38,   38,   38,   38,   38,   38,   27,   38,
       34,   36,   38,   38,   38,   39,   39,   39,   39,   39,

       39,   39,   27,   39,   34,   36,   39,   39,   39,   39,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,   32,   38,   20,   33,   38,   38,

       28,   29,   30,   38,   32,   39,   20,   33,   39,   39,
       39,   28,   29,   30,   37,   39,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,   19,   38,   38,   31,   19,   21,   39,   39,
       31,   15,   15,   15,   15,   15,   15,   15,   15,   15,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    9,
        9,    9,    9,    9,    9,    9,    9,    9,   38,   26,
       39,   26,   15,   15,   15,   15,    2,    2,    2,    2,
        9,    9,    9,    9,   38,   39,   15,   15,    2,    2,
        9,    9,   25,   25,   15,   15,    2,    2,    9,    9,
        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    1,    1,    1,    5,
        6,    7,    8,    9,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   15,   16,
       17,   18,    1,   19,   20,   21,   22,   23,   24,   25,
       21,   26,   27,   21,   21,   28,   21,   29,   30,   31,
       21,   32,   33,   34,   35,   36,   37,   21,   21,   21,
       38,   39,   40,    1,   41,    1,   42,   43,   44,   45,

       46,   47,   43,   48,   49,   43,   43,   50,   43,   51,
       52,   53,   43,   54,   55,   56,   57,   58,   59,   43,
       43,   43,   60,    1,   61,   62,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[64] =
    {   0,
        1,    1,    2,    3,    4,    1,    4,    1,    1,    1,
        1,    1,    5,    1,    1,    1,    1,    1,    1,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    1,    3,    1,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    1,
        1,    5,    1
    } ;

static const flex_int16_t yy_base[664] =
    {   0,
        0,    0,   63,    0,  126,    0,  189,    0,  970, 3986,
      965, 3986, 3986,  949,  939,  905, 3986, 3986,  897, 3986,
     3986,  240, 3986, 3986,  244,  888,  847, 3986,  793,  235,
      229,  231,  239,  236,  243,  234,  248,  244,  261, 3986,
     3986,  792,  791,  279,  275,  284,  287,  298,  315,  289,
      301,  322,  309, 3986, 3986, 3986,    0,  850, 3986, 3986,
        0,  835,    0,    0,    0,    0,    0,    0,  256,    0,
        0,  266,  789,  788,    0,  384,  447,  355,  384,  491,
      389,  448,  449,  386,  453,  486,    0,  762,    0,  687,
      546,  609,  387,  495,  653,  546,  547,  493,  552,  610,

      553,    0,    0,    0,    0,    0,  733, 3986,    0,  704,
        0,    0,    0,    0,    0,    0,  262,    0,    0,  330,
      681,  677,    0,  708,  771,  611,  563,  815,  655,  708,
      615,  701,  648,  713,    0,    0,  631,  870,  933,  764,
      717,  977,  774,  817,  775,  808,  870,  714,    0,    0,
        0,    0,  690, 3986,  684,  682,  682,    0,    0,    0,
        0,    0,  300,    0,    0,  342,  669,  667,    0, 1032,
     1095,  871,  873, 1139,  934,  935,  979,  875,  940,  972,
        0,    0,  594, 1194, 1257, 1025,  981, 1301, 1032, 1035,
     1041, 1088, 1099, 1100,    0,    0,    0,  653, 3986, 3986,

     3986, 3986,  637, 3986, 3986, 3986, 3986, 3986,  586,  310,
      388,  325,  398,  584,  583,  615,  320,  470,  440,  468,
      767,  571,  487,  750,  605,  525,  794,  874,  806,  949,
      572,  523,  516,  866,  644, 1090,  821,  756, 1098,  507,
      867,  784,  695, 1027,    0,  566,    0,  546,    0,    0,
        0,    0,    0, 1101, 1187, 1198, 1250, 1202, 1260, 1261,
     1305, 1296, 1307, 1340, 1322, 1345, 1346, 1363, 1386, 1384,
     3986, 3986, 1389, 1402, 1399, 1417, 1427, 1434, 1438, 1440,
     1445, 1455, 1478, 1481, 1488, 1507, 1494, 1509, 1534, 1525,
     1550,    0,  548,    0,  518,    0,    0,    0,    0,    0,

     1544, 1565, 1561, 1588, 1563, 1582, 1589, 1614, 1613, 1632,
     1617, 1650, 1657, 1653, 1676, 1697, 1702, 1703, 1707, 1704,
     1728, 1713, 1730, 1751, 1753, 1756, 1766, 1777, 1779, 1806,
     1802, 1812, 1817, 1852, 1835, 1833,    0,  527, 3986, 3986,
      512,    0,    0,    0,    0,    0, 1858, 1868, 1871, 1884,
     1887, 1908, 1912, 1915, 1925, 1944, 1951, 1948, 1977, 1976,
     1992, 2001, 2003, 2008, 2029, 2036, 2039, 2040, 2046, 2055,
     2057, 2083, 2084, 2093, 2086, 2102, 2131, 2112, 2130, 2155,
     2149, 2158, 1011, 1111, 1040, 1117, 1173,  927,  431, 1131,
      426,  424,  975, 1163, 1137, 1177, 1183, 1200, 1318, 1188,

     1282, 1038,  422, 1251,  421,  420, 1442, 1391, 1315, 1453,
     2190, 2193, 2195, 2222, 2239, 2226, 2211, 2249, 2254, 2255,
     2270, 2280, 2286, 2295, 2301, 2326, 2305, 2332, 2349, 2350,
     2351, 2355, 2376, 2378, 2387, 2394, 2411, 2404, 2435, 2432,
     2456, 2471, 2480, 2475, 2481, 2504, 2508, 2519, 2521, 2536,
     2532, 2560, 2557, 2581, 2596, 2575, 2621, 2614, 2619, 2637,
     2632, 2642, 2658, 2660, 2673, 2675, 2704, 2698, 2719, 2714,
     2721, 2742, 2757, 2758, 2759, 2760, 2775, 2785, 2796, 2806,
     2811, 2821, 2837, 2822, 2850, 2865, 2860, 2866, 2881, 2883,
     2898, 2921, 2927, 2904,  418, 1246,  409,  370,  389, 1367,

      365,  363,  361, 1394,  319, 1493,  317,  312, 1528, 1283,
     1539,  311,  307,  306,  304, 1573, 2914, 2937, 2954, 2958,
     2965, 2975, 2981, 2986, 2990, 3014, 3013, 3029, 3019, 3030,
     3054, 3045, 3070, 3073, 3083, 3086, 3089, 3110, 3121, 3126,
     3127, 3137, 3142, 3158, 3173, 3174, 3175, 3198, 3177, 3201,
     3222, 3225, 3246, 3227, 3251, 3248, 3274, 3275, 3277, 3298,
     3279, 3300, 3303, 3326, 3329, 3331, 3336, 3347, 3354, 3375,
     3364, 3380, 3382, 3391, 3419, 3408, 3418, 3429, 3435, 3436,
     3446, 3475,  302, 1599, 1376,  293,  270,  265, 1631, 1591,
      257, 3462, 3473, 3464, 3490, 3491, 3500, 3516, 3526, 3519,

     3535, 3552, 3563, 3554, 3567, 3570, 3591, 3607, 3606, 3608,
     3617, 3652, 3623, 3634, 3658, 3661, 3667, 3663, 1341,  255,
     1649,  253, 3696, 3698, 3699, 3714, 3717, 3715, 3746, 3742,
     3755, 3765, 3778, 3771, 1635, 1734, 3781, 3796, 3802, 3817,
     3821, 3827,  212,  209, 3828, 3845, 3846, 3864, 3871, 3873,
     3986,  260,  251, 3935, 3940, 3945, 3950, 3955, 3960, 3965,
     3970, 3975, 3980
    } ;

static const flex_int16_t yy_def[664] =
    {   0,
      651,    1,  651,    3,  651,    5,  651,    7,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  651,
      651,  651,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  651,  651,  651,  654,  654,  651,  651,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  655,  655,   77,   77,   77,
       77,   77,   77,   77,   77,   77,  654,  656,  654,  654,
      657,  657,   92,   92,   92,   92,   92,   92,   92,   92,

       92,  654,  654,  654,  654,  658,  658,  651,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  659,  659,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  658,  658,  658,  660,  660,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  658,  658,
      658,  661,  661,  651,  651,  661,  651,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  662,
      662,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      661,  661,  661,  663,  663,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  661,  661,  661,  651,  651,  651,

      651,  651,  651,  651,  651,  651,  651,  651,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  654,  654,  654,  654,  654,  654,
      654,  654,  654,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
      651,  651,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,  658,  658,  658,  658,  658,  658,  658,  658,  658,

      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  661,  661,  651,  651,
      661,  661,  661,  661,  661,  661,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  653,  653,  653,  653,  653,

      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  652,  652,  652,  652,  652,  652,

      652,  652,  652,  652,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  652,  652,  652,  652,  653,  653,  653,  653,
      653,   77,   77,   77,   77,   92,   92,   92,   92,   92,

      125,  125,  125,  125,  139,  139,  139,  139,  139,  171,
      171,  171,  171,  185,  185,  185,  185,  185,  652,  652,
      653,  653,   77,   77,   92,   92,  125,  125,  139,  139,
      171,  171,  185,  185,  652,  653,   77,   92,  125,  139,
      171,  185,  652,  653,   77,   92,  125,  139,  171,  185,
        0,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651
    } ;

static const flex_int16_t yy_nxt[4050] =
    {   0,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       29,   30,   29,   31,   32,   29,   33,   34,   35,   36,
       37,   29,   29,   38,   29,   29,   39,   40,   10,   41,
       42,   43,   43,   44,   43,   45,   46,   43,   47,   48,
       49,   50,   51,   43,   43,   52,   43,   43,   53,   54,
       55,   56,   10,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,   76,   76,   77,   76,   78,   79,   76,   80,
       81,   82,   83,   84,   76,   76,   85,   76,   76,   86,

       87,   88,   89,   90,   91,   91,   92,   91,   93,   94,
       91,   95,   96,   97,   98,   99,   91,   91,  100,   91,
       91,  101,  102,  103,  104,  105,  106,  107,  108,  106,
      109,  110,  111,  112,  113,  114,  115,  116,  117,  118,
      119,  120,  121,  122,  123,  124,  124,  125,  124,  126,
      127,  124,  128,  129,  130,  131,  132,  124,  124,  133,
      124,  124,  134,  135,  106,  136,  137,  138,  138,  139,
      138,  140,  141,  138,  142,  143,  144,  145,  146,  138,
      138,  147,  138,  138,  148,  149,  150,  151,  106,  152,
      153,  154,  152,  155,  156,  157,  158,  159,  160,  161,

      162,  163,  164,  165,  166,  167,  168,  169,  170,  170,
      171,  170,  172,  173,  170,  174,  175,  176,  177,  178,
      170,  170,  179,  170,  170,  180,  181,  152,  182,  183,
      184,  184,  185,  184,  186,  187,  184,  188,  189,  190,
      191,  192,  184,  184,  193,  184,  184,  194,  195,  196,
      197,  152,  203,  205,  210,  226,  212,  214,  222,  218,
      206,  213,  211,  215,  209,  219,  220,  216,  248,  224,
      651,  217,  221,  651,  295,  250,  210,  223,  212,  214,
      222,  218,  251,  213,  211,  215,  225,  219,  220,  216,
      204,  224,  204,  217,  221,  204,  204,  204,  227,  223,

      204,  204,  229,  231,  204,  204,  228,  230,  225,  204,
      232,  233,  341,  240,  651,  234,  651,  249,  651,  235,
      227,  236,  204,  296,  229,  231,  651,  237,  228,  230,
      241,  651,  232,  233,  244,  240,  204,  234,  238,  297,
      204,  235,  383,  236,  239,  204,  298,  242,  204,  237,
      204,  343,  241,  243,  651,  388,  244,  385,  344,  204,
      238,  342,  204,  651,  383,  651,  239,  651,  651,  242,
      204,  651,  651,  651,  254,  243,  204,  388,  651,  385,
      651,  651,  257,  204,  245,  245,  651,  258,  245,  245,
      245,  245,  245,  245,  245,  245,  254,  245,  245,  245,

      245,  245,  245,  254,  257,  254,  273,  384,  254,  258,
      259,  254,  263,  254,  276,  268,  254,  386,  264,  277,
      584,  245,  651,  245,  651,  254,  651,  254,  273,  384,
      254,  651,  259,  254,  263,  254,  276,  268,  254,  386,
      264,  277,  584,  245,  245,  249,  245,  245,  245,  651,
      651,  245,  245,  245,  245,  245,  245,  245,  245,  651,
      245,  245,  245,  245,  245,  245,  255,  254,  254,  390,
      651,  265,  254,  267,  256,  254,  254,  266,  269,  651,
      254,  651,  651,  651,  245,  651,  245,  651,  255,  254,
      254,  390,  651,  265,  254,  267,  256,  254,  254,  266,

      269,  651,  254,  389,  391,  254,  245,  245,  249,  245,
      254,  270,  273,  254,  278,  260,  393,  287,  254,  261,
      273,  279,  273,  262,  341,  389,  391,  254,  338,  651,
      295,  651,  254,  270,  273,  254,  278,  260,  393,  287,
      254,  261,  273,  279,  273,  262,  245,  245,  651,  293,
      245,  245,  245,  245,  245,  245,  245,  245,  248,  245,
      245,  245,  245,  245,  245,  273,  273,  246,  651,  283,
      285,  273,  273,  273,  273,  284,  286,  651,  291,  273,
      273,  288,  301,  245,  651,  245,  651,  273,  273,  306,
      301,  283,  285,  273,  273,  273,  273,  284,  286,  400,

      291,  273,  273,  288,  301,  245,  245,  249,  245,  245,
      245,  306,  301,  245,  245,  245,  245,  245,  245,  245,
      245,  400,  245,  245,  245,  245,  245,  245,  274,  273,
      301,  395,  651,  651,  301,  289,  275,  273,  304,  314,
      387,  290,  301,  305,  651,  651,  245,  651,  245,  203,
      274,  273,  301,  395,  198,  342,  301,  289,  275,  273,
      304,  314,  387,  290,  301,  305,  651,  301,  245,  245,
      249,  245,  273,  316,  301,  301,  651,  280,  310,  402,
      273,  281,  301,  346,  311,  282,  345,  340,  200,  301,
      339,  338,  296,  300,  273,  316,  301,  301,  299,  280,

      310,  402,  273,  281,  301,  651,  311,  282,  292,  292,
      294,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      301,  292,  292,  292,  292,  292,  292,  301,  301,  409,
      315,  312,  301,  318,  293,  301,  323,  313,  317,  336,
      301,  318,  301,  324,  318,  292,  292,  292,  249,  301,
      301,  409,  315,  312,  301,  318,  651,  301,  323,  313,
      317,  336,  301,  318,  272,  324,  318,  292,  292,  296,
      292,  292,  292,  394,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  318,  292,  292,  292,  292,  292,  292,
      302,  321,  405,  318,  318,  394,  322,  328,  303,  332,

      392,  318,  318,  329,  253,  318,  252,  408,  292,  292,
      292,  651,  302,  321,  405,  318,  318,  651,  322,  328,
      303,  332,  392,  318,  318,  329,  396,  318,  651,  408,
      292,  292,  296,  292,  301,  318,  318,  333,  398,  307,
      330,  247,  301,  308,  318,  651,  331,  309,  396,  318,
      404,  246,  204,  204,  204,  651,  301,  318,  318,  333,
      398,  307,  330,  208,  301,  308,  318,  651,  331,  309,
      292,  292,  404,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  651,  292,  292,  292,  292,  292,  292,  318,
      347,  401,  347,  397,  347,  334,  407,  318,  350,  352,

      347,  335,  347,  351,  361,  207,  202,  292,  292,  292,
      201,  318,  347,  401,  347,  397,  347,  334,  407,  318,
      350,  352,  347,  335,  347,  351,  361,  651,  651,  292,
      292,  296,  292,  292,  292,  651,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  200,  292,  292,  292,  292,
      292,  292,  319,  347,  347,  199,  500,  356,  358,  347,
      320,  347,  347,  357,  359,  362,  198,  347,  399,  651,
      292,  292,  292,  651,  319,  347,  347,  651,  500,  356,
      358,  347,  320,  347,  347,  357,  359,  362,  651,  347,
      399,  347,  292,  292,  296,  292,  318,  363,  347,  347,

      369,  325,  502,  360,  318,  326,  347,  370,  364,  327,
      651,  651,  651,  347,  651,  651,  651,  651,  318,  363,
      347,  347,  369,  325,  502,  360,  318,  326,  347,  370,
      364,  327,  337,  337,  495,  337,  651,  337,  651,  337,
      337,  337,  337,  337,  364,  337,  337,  337,  337,  337,
      337,  364,  367,  410,  364,  374,  495,  368,  376,  364,
      364,  375,  364,  497,  377,  378,  364,  511,  364,  337,
      337,  337,  651,  364,  367,  410,  364,  374,  651,  368,
      376,  364,  364,  375,  364,  497,  377,  378,  651,  511,
      364,  337,  337,  342,  337,  337,  337,  651,  337,  651,

      337,  651,  337,  337,  337,  337,  337,  364,  337,  337,
      337,  337,  337,  337,  348,  364,  651,  379,  364,  364,
      254,  651,  349,  403,  380,  382,  364,  364,  254,  364,
      381,  406,  337,  337,  337,  651,  348,  364,  498,  379,
      364,  364,  254,  496,  349,  403,  380,  382,  364,  364,
      254,  651,  381,  406,  337,  337,  342,  337,  347,  651,
      498,  501,  245,  353,  504,  496,  347,  354,  651,  651,
      651,  355,  651,  651,  651,  651,  651,  651,  651,  651,
      347,  651,  651,  501,  651,  353,  504,  651,  347,  354,
      651,  503,  651,  355,  337,  337,  499,  337,  651,  337,

      505,  337,  337,  337,  337,  337,  254,  337,  337,  337,
      337,  337,  337,  503,  254,  506,  651,  412,  499,  411,
      509,  414,  505,  507,  651,  254,  651,  651,  254,  254,
      651,  337,  337,  337,  651,  651,  254,  506,  651,  412,
      651,  411,  509,  414,  651,  507,  651,  254,  245,  651,
      651,  254,  651,  337,  337,  342,  337,  337,  337,  245,
      337,  651,  337,  245,  337,  337,  337,  337,  337,  254,
      337,  337,  337,  337,  337,  337,  365,  254,  583,  254,
      254,  512,  413,  651,  366,  651,  651,  254,  254,  651,
      651,  254,  651,  651,  337,  337,  337,  651,  365,  254,

      583,  254,  254,  512,  413,  510,  366,  651,  651,  254,
      254,  245,  651,  651,  589,  254,  337,  337,  342,  337,
      364,  245,  245,  254,  254,  371,  254,  510,  364,  372,
      415,  416,  254,  373,  254,  651,  589,  254,  515,  508,
      417,  254,  364,  651,  651,  254,  254,  371,  254,  254,
      364,  372,  415,  416,  254,  373,  254,  245,  419,  254,
      515,  508,  417,  254,  254,  254,  245,  254,  245,  418,
      651,  254,  254,  254,  635,  651,  651,  651,  420,  651,
      419,  254,  254,  245,  651,  651,  254,  254,  651,  254,
      254,  418,  421,  585,  254,  254,  635,  651,  620,  651,

      420,  245,  651,  254,  254,  254,  245,  245,  273,  422,
      423,  254,  254,  254,  421,  585,  273,  586,  425,  514,
      620,  273,  651,  651,  245,  254,  273,  254,  651,  273,
      273,  422,  423,  254,  424,  254,  273,  651,  273,  586,
      425,  514,  651,  273,  273,  245,  427,  245,  273,  426,
      245,  273,  651,  273,  273,  651,  424,  273,  273,  273,
      245,  428,  651,  245,  273,  273,  273,  273,  427,  513,
      429,  426,  273,  651,  273,  273,  273,  651,  245,  273,
      516,  273,  273,  428,  651,  651,  273,  273,  245,  273,
      430,  513,  429,  651,  273,  245,  273,  273,  651,  245,

      273,  245,  516,  651,  273,  273,  245,  273,  273,  651,
      432,  431,  430,  273,  651,  273,  245,  651,  651,  273,
      651,  273,  273,  651,  433,  587,  273,  273,  273,  273,
      273,  651,  432,  431,  273,  273,  273,  273,  435,  245,
      434,  651,  245,  273,  273,  651,  433,  587,  273,  245,
      273,  588,  273,  273,  651,  245,  273,  436,  273,  437,
      435,  273,  434,  301,  651,  590,  273,  651,  245,  273,
      245,  301,  651,  588,  273,  273,  438,  273,  651,  436,
      440,  437,  442,  273,  301,  301,  245,  590,  301,  651,
      301,  273,  301,  301,  651,  245,  591,  439,  438,  273,

      651,  301,  440,  651,  442,  292,  301,  301,  301,  301,
      301,  245,  301,  622,  301,  301,  301,  651,  591,  439,
      441,  651,  292,  301,  292,  619,  292,  651,  651,  301,
      301,  301,  301,  301,  651,  622,  301,  301,  301,  443,
      301,  301,  441,  292,  301,  651,  446,  619,  444,  292,
      292,  301,  651,  651,  301,  301,  651,  621,  301,  301,
      651,  443,  301,  301,  651,  445,  301,  643,  446,  301,
      444,  651,  301,  301,  292,  292,  301,  301,  292,  621,
      301,  301,  636,  651,  301,  651,  447,  445,  651,  643,
      448,  301,  651,  292,  301,  301,  651,  651,  301,  301,

      651,  651,  301,  301,  636,  449,  301,  651,  447,  651,
      651,  292,  448,  651,  292,  651,  301,  301,  292,  651,
      450,  301,  318,  453,  301,  301,  318,  449,  451,  301,
      318,  318,  455,  651,  318,  651,  651,  292,  301,  452,
      318,  651,  450,  301,  318,  453,  301,  318,  318,  318,
      451,  301,  318,  318,  455,  318,  318,  456,  292,  651,
      454,  452,  318,  292,  292,  292,  644,  651,  292,  318,
      318,  318,  318,  651,  292,  318,  651,  318,  318,  456,
      318,  457,  454,  318,  651,  318,  651,  651,  644,  292,
      651,  292,  318,  318,  318,  651,  318,  318,  318,  651,

      318,  458,  318,  457,  318,  318,  318,  318,  460,  651,
      459,  651,  292,  651,  292,  318,  651,  292,  318,  651,
      318,  318,  651,  458,  651,  318,  318,  292,  318,  318,
      460,  318,  459,  318,  651,  462,  318,  651,  292,  318,
      292,  651,  461,  318,  318,  651,  463,  318,  651,  651,
      651,  318,  318,  318,  318,  318,  651,  462,  318,  466,
      318,  318,  318,  292,  461,  651,  318,  292,  463,  465,
      651,  318,  651,  292,  318,  464,  318,  347,  292,  318,
      651,  466,  318,  651,  318,  347,  651,  347,  651,  651,
      468,  465,  651,  318,  292,  347,  292,  464,  347,  347,

      467,  318,  651,  347,  651,  651,  470,  347,  651,  347,
      651,  347,  468,  292,  347,  651,  469,  347,  651,  337,
      347,  651,  467,  651,  651,  347,  651,  347,  470,  337,
      651,  347,  337,  347,  347,  347,  347,  651,  469,  347,
      471,  651,  347,  651,  347,  337,  651,  651,  337,  347,
      651,  651,  347,  347,  651,  651,  347,  347,  651,  651,
      472,  347,  471,  347,  347,  651,  347,  347,  651,  337,
      347,  347,  651,  337,  347,  347,  337,  473,  347,  651,
      474,  651,  472,  651,  475,  347,  337,  651,  651,  347,
      651,  651,  347,  347,  651,  347,  347,  347,  651,  473,

      347,  651,  474,  347,  347,  337,  475,  651,  651,  337,
      476,  347,  337,  651,  651,  651,  651,  347,  347,  347,
      347,  477,  347,  651,  478,  347,  347,  364,  347,  479,
      347,  651,  476,  347,  651,  364,  651,  337,  337,  651,
      651,  347,  347,  477,  347,  651,  478,  651,  364,  364,
      347,  479,  347,  337,  651,  481,  364,  364,  364,  483,
      651,  480,  337,  364,  337,  364,  364,  364,  651,  337,
      364,  482,  651,  484,  364,  651,  364,  481,  364,  651,
      364,  483,  364,  480,  364,  364,  651,  364,  364,  364,
      337,  651,  651,  482,  651,  484,  364,  337,  364,  651,

      337,  337,  364,  364,  364,  364,  364,  337,  485,  651,
      364,  364,  364,  364,  651,  488,  337,  651,  337,  486,
      364,  364,  651,  651,  364,  364,  487,  364,  651,  364,
      485,  364,  364,  364,  364,  364,  651,  488,  489,  364,
      651,  486,  364,  364,  337,  337,  651,  337,  487,  364,
      364,  364,  651,  364,  337,  651,  651,  364,  364,  491,
      489,  364,  651,  337,  490,  651,  651,  651,  364,  651,
      651,  364,  364,  337,  364,  651,  364,  364,  492,  364,
      364,  491,  364,  493,  494,  364,  490,  651,  651,  651,
      364,  337,  337,  651,  651,  651,  364,  651,  364,  364,

      492,  651,  651,  651,  364,  493,  494,  364,  651,  254,
      337,  651,  254,  517,  254,  651,  337,  254,  519,  337,
      254,  651,  254,  651,  651,  518,  651,  651,  651,  651,
      254,  254,  651,  651,  254,  517,  254,  651,  254,  254,
      519,  254,  254,  520,  254,  254,  651,  518,  651,  254,
      651,  245,  254,  254,  245,  522,  245,  651,  254,  651,
      254,  651,  521,  254,  651,  520,  254,  254,  254,  651,
      651,  254,  245,  254,  254,  254,  254,  522,  651,  523,
      254,  254,  254,  245,  521,  651,  651,  245,  254,  254,
      254,  651,  651,  651,  651,  254,  254,  524,  254,  254,

      245,  523,  651,  254,  254,  254,  651,  254,  525,  651,
      245,  254,  651,  526,  273,  245,  245,  651,  527,  524,
      273,  254,  273,  651,  273,  651,  530,  254,  273,  254,
      525,  245,  273,  528,  651,  526,  273,  651,  651,  651,
      527,  245,  273,  651,  273,  273,  273,  245,  530,  529,
      273,  273,  651,  273,  273,  528,  245,  651,  651,  273,
      651,  651,  245,  651,  531,  651,  245,  273,  273,  273,
      273,  529,  532,  273,  273,  273,  273,  273,  273,  533,
      651,  273,  273,  651,  651,  534,  531,  245,  651,  651,
      273,  273,  273,  245,  532,  273,  273,  273,  273,  273,

      273,  533,  651,  273,  273,  273,  273,  534,  651,  651,
      245,  245,  245,  273,  535,  651,  245,  273,  651,  273,
      651,  273,  536,  273,  651,  273,  651,  273,  273,  651,
      273,  538,  651,  651,  537,  273,  535,  245,  273,  245,
      651,  651,  651,  273,  536,  273,  651,  651,  245,  651,
      651,  301,  273,  538,  301,  245,  537,  651,  539,  301,
      273,  651,  301,  651,  540,  245,  651,  651,  651,  651,
      651,  651,  245,  301,  651,  301,  301,  651,  651,  541,
      539,  301,  651,  301,  301,  651,  540,  651,  651,  651,
      301,  651,  542,  292,  301,  651,  292,  301,  301,  301,

      301,  541,  301,  543,  544,  301,  651,  301,  301,  651,
      651,  651,  301,  651,  542,  651,  301,  292,  651,  651,
      301,  301,  301,  301,  301,  543,  544,  301,  651,  301,
      301,  301,  292,  651,  545,  301,  292,  651,  301,  651,
      301,  292,  292,  651,  651,  301,  301,  651,  546,  301,
      651,  301,  651,  301,  651,  301,  545,  301,  651,  548,
      301,  651,  301,  301,  547,  292,  651,  651,  301,  292,
      546,  651,  651,  301,  651,  651,  318,  301,  651,  318,
      292,  548,  292,  549,  318,  301,  547,  318,  651,  550,
      651,  651,  651,  292,  318,  651,  651,  292,  318,  651,

      318,  318,  318,  651,  551,  549,  318,  553,  318,  318,
      651,  550,  651,  651,  651,  318,  318,  552,  292,  651,
      651,  292,  318,  318,  318,  651,  551,  651,  651,  553,
      318,  651,  651,  318,  651,  651,  292,  318,  318,  552,
      318,  318,  292,  555,  554,  318,  318,  651,  318,  651,
      651,  318,  651,  651,  651,  318,  318,  292,  651,  318,
      318,  318,  318,  318,  318,  555,  554,  556,  318,  318,
      318,  651,  651,  318,  651,  292,  651,  318,  318,  318,
      292,  318,  292,  318,  651,  557,  318,  318,  558,  556,
      651,  318,  318,  292,  318,  651,  559,  651,  292,  318,

      318,  318,  560,  292,  651,  651,  651,  557,  651,  318,
      558,  651,  651,  651,  318,  651,  318,  347,  559,  292,
      651,  292,  318,  347,  560,  347,  651,  561,  651,  651,
      562,  347,  651,  347,  292,  564,  292,  651,  347,  347,
      347,  347,  563,  651,  565,  347,  347,  347,  347,  561,
      651,  651,  562,  347,  651,  347,  651,  564,  651,  337,
      347,  347,  347,  347,  563,  337,  565,  651,  347,  347,
      347,  566,  651,  651,  651,  337,  347,  347,  347,  347,
      337,  651,  337,  347,  347,  347,  347,  347,  567,  651,
      651,  347,  651,  566,  347,  651,  651,  651,  347,  347,

      347,  347,  568,  337,  347,  651,  347,  347,  347,  347,
      567,  651,  347,  569,  651,  347,  347,  651,  337,  337,
      337,  337,  651,  570,  568,  364,  347,  651,  651,  571,
      364,  651,  651,  364,  347,  569,  337,  347,  364,  651,
      364,  364,  651,  572,  573,  570,  337,  364,  364,  364,
      651,  571,  364,  651,  575,  364,  364,  337,  574,  651,
      364,  651,  364,  364,  364,  572,  573,  337,  651,  364,
      364,  364,  337,  576,  651,  651,  575,  364,  364,  364,
      574,  651,  337,  337,  364,  364,  364,  364,  651,  651,
      651,  364,  364,  364,  577,  576,  578,  651,  337,  364,

      364,  364,  364,  651,  651,  651,  364,  364,  364,  364,
      364,  337,  651,  651,  364,  364,  577,  364,  578,  651,
      651,  337,  364,  364,  364,  579,  337,  337,  651,  651,
      364,  582,  364,  254,  651,  651,  651,  651,  651,  364,
      364,  254,  337,  651,  337,  364,  364,  579,  364,  580,
      581,  651,  651,  582,  364,  254,  254,  651,  651,  337,
      651,  651,  364,  254,  254,  337,  651,  651,  364,  592,
      364,  580,  581,  254,  651,  245,  364,  254,  254,  651,
      651,  254,  337,  651,  254,  254,  254,  651,  337,  651,
      651,  592,  254,  651,  254,  254,  593,  651,  245,  254,

      254,  594,  254,  254,  651,  254,  254,  254,  254,  254,
      651,  651,  651,  254,  254,  245,  254,  254,  593,  245,
      651,  651,  254,  594,  254,  651,  245,  254,  651,  651,
      254,  254,  273,  254,  651,  254,  245,  595,  273,  254,
      273,  254,  245,  651,  651,  651,  273,  245,  273,  273,
      651,  245,  651,  651,  273,  254,  273,  273,  651,  595,
      273,  596,  273,  254,  273,  651,  651,  651,  273,  651,
      273,  273,  273,  273,  245,  245,  598,  597,  273,  273,
      245,  273,  651,  596,  651,  651,  273,  651,  651,  273,
      245,  245,  273,  651,  273,  273,  599,  273,  598,  597,

      273,  651,  273,  273,  651,  273,  245,  651,  273,  651,
      273,  273,  651,  273,  273,  245,  273,  651,  599,  273,
      651,  651,  273,  651,  273,  651,  651,  273,  651,  273,
      273,  245,  273,  600,  245,  273,  651,  273,  273,  651,
      301,  651,  651,  651,  245,  301,  301,  245,  301,  651,
      245,  273,  651,  301,  301,  600,  301,  651,  601,  273,
      651,  301,  301,  651,  301,  651,  651,  301,  301,  301,
      301,  245,  651,  602,  651,  301,  301,  301,  301,  651,
      601,  651,  292,  301,  603,  301,  301,  292,  292,  651,
      651,  301,  301,  301,  301,  602,  318,  651,  292,  301,

      301,  301,  301,  292,  318,  651,  603,  301,  651,  651,
      651,  651,  651,  651,  301,  301,  301,  301,  318,  292,
      318,  604,  301,  301,  301,  301,  318,  651,  318,  651,
      651,  651,  651,  605,  292,  292,  292,  651,  292,  301,
      651,  318,  318,  604,  318,  651,  318,  301,  651,  318,
      318,  651,  318,  651,  318,  605,  651,  651,  607,  292,
      651,  651,  292,  318,  651,  318,  318,  318,  318,  606,
      318,  318,  651,  318,  318,  318,  318,  608,  318,  651,
      607,  651,  651,  292,  651,  651,  292,  318,  292,  318,
      651,  606,  318,  318,  318,  318,  318,  318,  347,  608,

      318,  318,  318,  651,  318,  651,  347,  292,  651,  292,
      651,  651,  292,  651,  651,  318,  318,  318,  318,  347,
      347,  609,  347,  318,  318,  318,  318,  347,  347,  651,
      347,  651,  610,  651,  651,  292,  292,  651,  292,  318,
      337,  347,  651,  609,  347,  347,  651,  318,  347,  347,
      347,  651,  347,  347,  610,  347,  347,  612,  347,  292,
      611,  337,  651,  347,  337,  651,  347,  347,  651,  651,
      347,  651,  347,  347,  347,  347,  651,  347,  347,  612,
      347,  347,  611,  364,  651,  347,  651,  337,  347,  651,
      337,  364,  337,  651,  347,  347,  347,  337,  613,  364,

      651,  364,  347,  347,  651,  364,  651,  364,  337,  364,
      364,  651,  614,  364,  651,  337,  347,  651,  364,  651,
      613,  364,  651,  364,  347,  337,  651,  364,  651,  364,
      651,  364,  364,  651,  614,  364,  337,  364,  364,  616,
      364,  337,  615,  337,  617,  364,  364,  651,  364,  364,
      651,  651,  337,  651,  364,  364,  364,  364,  651,  364,
      364,  616,  364,  364,  615,  364,  617,  364,  364,  337,
      364,  651,  651,  364,  651,  651,  364,  364,  364,  337,
      337,  254,  651,  254,  364,  364,  624,  364,  651,  254,
      337,  254,  254,  651,  364,  364,  337,  337,  618,  623,

      254,  651,  364,  254,  651,  254,  651,  337,  624,  254,
      273,  254,  651,  254,  254,  651,  364,  254,  273,  273,
      618,  623,  254,  245,  364,  245,  651,  273,  651,  651,
      651,  254,  273,  651,  245,  273,  337,  651,  273,  254,
      273,  273,  625,  273,  651,  273,  273,  651,  626,  273,
      651,  245,  245,  273,  301,  651,  651,  273,  651,  651,
      273,  245,  301,  651,  625,  273,  651,  273,  273,  651,
      626,  301,  651,  301,  651,  273,  301,  245,  627,  301,
      245,  301,  301,  651,  301,  628,  318,  245,  651,  318,
      301,  651,  651,  301,  318,  301,  292,  318,  651,  651,

      627,  301,  651,  301,  301,  651,  651,  628,  318,  651,
      318,  318,  301,  292,  651,  292,  318,  629,  318,  318,
      651,  651,  651,  651,  292,  318,  318,  347,  292,  630,
      651,  292,  318,  318,  318,  347,  347,  651,  651,  629,
      318,  651,  347,  631,  347,  651,  651,  318,  318,  347,
      347,  630,  292,  364,  651,  318,  318,  347,  347,  651,
      651,  364,  651,  651,  347,  631,  347,  292,  292,  337,
      651,  347,  347,  651,  632,  364,  651,  364,  337,  347,
      364,  651,  364,  364,  337,  364,  364,  633,  364,  634,
      364,  651,  651,  347,  364,  337,  632,  651,  651,  364,

      651,  347,  364,  651,  364,  651,  651,  364,  364,  633,
      364,  634,  364,  337,  651,  254,  364,  254,  273,  337,
      651,  651,  337,  254,  337,  254,  273,  651,  337,  637,
      651,  651,  638,  273,  301,  651,  301,  254,  651,  254,
      273,  273,  301,  651,  301,  254,  651,  254,  273,  651,
      639,  637,  651,  651,  638,  273,  301,  245,  301,  245,
      245,  318,  651,  273,  301,  318,  301,  651,  651,  318,
      651,  651,  639,  318,  347,  245,  292,  651,  292,  640,
      651,  651,  347,  318,  347,  651,  651,  318,  641,  651,
      364,  318,  347,  651,  651,  318,  347,  364,  364,  651,

      254,  640,  651,  292,  347,  364,  347,  292,  254,  651,
      641,  642,  364,  645,  347,  273,  337,  651,  651,  364,
      364,  301,  254,  273,  651,  651,  337,  364,  646,  301,
      254,  651,  337,  642,  647,  645,  318,  273,  651,  337,
      347,  651,  245,  301,  318,  273,  364,  254,  347,  648,
      646,  301,  651,  649,  364,  254,  647,  245,  318,  650,
      651,  651,  347,  292,  273,  301,  318,  651,  364,  254,
      347,  648,  273,  301,  651,  649,  364,  254,  292,  651,
      651,  650,  337,  318,  651,  651,  273,  301,  337,  245,
      347,  318,  364,  651,  273,  301,  651,  651,  347,  651,

      364,  651,  651,  651,  651,  318,  245,  292,  651,  651,
      651,  651,  347,  318,  364,  651,  651,  651,  651,  651,
      347,  651,  364,  651,  651,  292,  651,  651,  651,  651,
      651,  651,  337,  651,  337,  245,  651,  651,  245,  245,
      254,  651,  651,  254,  254,  271,  271,  271,  271,  271,
      273,  651,  651,  273,  273,  292,  651,  292,  292,  292,
      301,  651,  301,  301,  301,  318,  651,  318,  318,  318,
      337,  651,  337,  651,  337,  347,  651,  347,  651,  347,
      364,  651,  364,  651,  364,    9,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,

      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651
    } ;

static const flex_int16_t yy_chk[4050] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,   22,   25,   30,  653,   31,   32,   36,   34,
       25,   31,   30,   33,  652,   34,   35,   33,   69,   38,
      644,   33,   35,  643,  117,   72,   30,   37,   31,   32,
       36,   34,   72,   31,   30,   33,   39,   34,   35,   33,
       31,   38,   32,   33,   35,   36,   30,   34,   44,   37,

       33,   22,   45,   46,   35,   38,   44,   45,   39,   37,
       46,   47,  163,   50,  622,   47,  620,   69,  591,   47,
       44,   48,   39,  117,   45,   46,  588,   48,   44,   45,
       51,  587,   46,   47,   53,   50,   45,   47,   49,  120,
       44,   47,  210,   48,   49,   46,  120,   52,   47,   48,
       50,  166,   51,   52,  586,  217,   53,  212,  166,   48,
       49,  163,   51,  583,  210,  515,   49,  514,  513,   52,
       53,  210,  512,  508,   78,   52,   49,  217,  507,  212,
      505,  217,   78,   52,   76,   76,  212,   78,   76,   76,
       76,   76,   76,   76,   76,   76,   78,   76,   76,   76,

       76,   76,   76,   79,   78,   84,   93,  211,   81,   78,
       79,   79,   81,   84,   93,   84,   81,  213,   81,   93,
      499,   76,  503,   76,  502,   79,  501,   84,   93,  211,
       81,  498,   79,   79,   81,   84,   93,   84,   81,  213,
       81,   93,  499,   76,   76,   76,   76,   77,   77,  211,
      499,   77,   77,   77,   77,   77,   77,   77,   77,  213,
       77,   77,   77,   77,   77,   77,   77,   82,   83,  219,
      497,   82,   85,   83,   77,   82,   83,   82,   85,  495,
       85,  406,  405,  403,   77,  392,   77,  391,   77,   82,
       83,  219,  389,   82,   85,   83,   77,   82,   83,   82,

       85,  219,   85,  218,  220,   86,   77,   77,   77,   77,
       80,   86,   98,   86,   94,   80,  223,   98,   80,   80,
       98,   94,   94,   80,  341,  218,  220,   86,  338,  220,
      295,  218,   80,   86,   98,   86,   94,   80,  223,   98,
       80,   80,   98,   94,   94,   80,   91,   91,  223,  293,
       91,   91,   91,   91,   91,   91,   91,   91,  248,   91,
       91,   91,   91,   91,   91,   96,   97,  246,  240,   96,
       97,   99,  101,   96,   97,   96,   97,  233,  101,   99,
      101,   99,  127,   91,  232,   91,  226,   96,   97,  127,
      127,   96,   97,   99,  101,   96,   97,   96,   97,  231,

      101,   99,  101,   99,  127,   91,   91,   91,   91,   92,
       92,  127,  127,   92,   92,   92,   92,   92,   92,   92,
       92,  231,   92,   92,   92,   92,   92,   92,   92,  100,
      126,  225,  222,  231,  131,  100,   92,  100,  126,  131,
      216,  100,  131,  126,  215,  214,   92,  209,   92,  203,
       92,  100,  126,  225,  198,  183,  131,  100,   92,  100,
      126,  131,  216,  100,  131,  126,  225,  133,   92,   92,
       92,   92,   95,  133,  129,  133,  216,   95,  129,  235,
       95,   95,  129,  168,  129,   95,  167,  157,  156,  133,
      155,  153,  137,  122,   95,  133,  129,  133,  121,   95,

      129,  235,   95,   95,  129,  235,  129,   95,  124,  124,
      110,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      132,  124,  124,  124,  124,  124,  124,  130,  132,  243,
      132,  130,  134,  148,  107,  130,  141,  130,  134,  148,
      134,  148,  132,  141,  141,  124,  124,  124,   90,  130,
      132,  243,  132,  130,  134,  148,  243,  130,  141,  130,
      134,  148,  134,  148,   88,  141,  141,  124,  124,  124,
      124,  125,  125,  224,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  140,  125,  125,  125,  125,  125,  125,
      125,  140,  238,  143,  145,  224,  140,  143,  125,  145,

      221,  143,  145,  143,   74,  140,   73,  242,  125,  125,
      125,  224,  125,  140,  238,  143,  145,  238,  140,  143,
      125,  145,  221,  143,  145,  143,  227,  146,  221,  242,
      125,  125,  125,  125,  128,  146,  144,  146,  229,  128,
      144,   62,  128,  128,  144,  242,  144,  128,  227,  146,
      237,   58,   43,   42,   29,  227,  128,  146,  144,  146,
      229,  128,  144,   27,  128,  128,  144,  229,  144,  128,
      138,  138,  237,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  237,  138,  138,  138,  138,  138,  138,  147,
      172,  234,  173,  228,  178,  147,  241,  147,  172,  173,

      173,  147,  178,  172,  178,   26,   19,  138,  138,  138,
       16,  147,  172,  234,  173,  228,  178,  147,  241,  147,
      172,  173,  173,  147,  178,  172,  178,  234,  241,  138,
      138,  138,  138,  139,  139,  228,  139,  139,  139,  139,
      139,  139,  139,  139,  139,   15,  139,  139,  139,  139,
      139,  139,  139,  175,  176,   14,  388,  175,  176,  179,
      139,  175,  176,  175,  176,  179,   11,  179,  230,    9,
      139,  139,  139,    0,  139,  175,  176,    0,  388,  175,
      176,  179,  139,  175,  176,  175,  176,  179,  388,  179,
      230,  180,  139,  139,  139,  139,  142,  180,  177,  180,

      187,  142,  393,  177,  142,  142,  177,  187,  187,  142,
      230,    0,    0,  180,    0,    0,    0,    0,  142,  180,
      177,  180,  187,  142,  393,  177,  142,  142,  177,  187,
      187,  142,  170,  170,  383,  170,  393,  170,    0,  170,
      170,  170,  170,  170,  186,  170,  170,  170,  170,  170,
      170,  189,  186,  244,  190,  189,  383,  186,  190,  189,
      191,  189,  190,  385,  190,  191,  186,  402,  191,  170,
      170,  170,  383,  189,  186,  244,  190,  189,    0,  186,
      190,  189,  191,  189,  190,  385,  190,  191,  244,  402,
      191,  170,  170,  170,  170,  171,  171,    0,  171,  402,

      171,  385,  171,  171,  171,  171,  171,  192,  171,  171,
      171,  171,  171,  171,  171,  192,    0,  192,  193,  194,
      254,    0,  171,  236,  193,  194,  193,  194,  254,  192,
      193,  239,  171,  171,  171,    0,  171,  192,  386,  192,
      193,  194,  254,  384,  171,  236,  193,  194,  193,  194,
      254,  236,  193,  239,  171,  171,  171,  171,  174,  239,
      386,  390,  254,  174,  395,  384,  174,  174,    0,    0,
        0,  174,  384,    0,    0,    0,    0,    0,  386,    0,
      174,    0,    0,  390,    0,  174,  395,    0,  174,  174,
        0,  394,  390,  174,  184,  184,  387,  184,  395,  184,

      396,  184,  184,  184,  184,  184,  255,  184,  184,  184,
      184,  184,  184,  394,  255,  397,    0,  256,  387,  255,
      400,  258,  396,  398,  394,  256,    0,    0,  255,  258,
        0,  184,  184,  184,  387,    0,  255,  397,  396,  256,
        0,  255,  400,  258,  397,  398,    0,  256,  255,  400,
        0,  258,    0,  184,  184,  184,  184,  185,  185,  256,
      185,  398,  185,  258,  185,  185,  185,  185,  185,  257,
      185,  185,  185,  185,  185,  185,  185,  257,  496,  259,
      260,  404,  257,    0,  185,    0,    0,  259,  260,    0,
        0,  257,    0,    0,  185,  185,  185,    0,  185,  257,

      496,  259,  260,  404,  257,  401,  185,  496,    0,  259,
      260,  257,  404,    0,  510,  262,  185,  185,  185,  185,
      188,  259,  260,  262,  261,  188,  263,  401,  188,  188,
      261,  262,  261,  188,  263,    0,  510,  262,  409,  399,
      263,  265,  188,  401,  510,  262,  261,  188,  263,  265,
      188,  188,  261,  262,  261,  188,  263,  262,  265,  264,
      409,  399,  263,  265,  266,  267,  261,  264,  263,  264,
        0,  265,  266,  267,  619,    0,  409,    0,  266,  399,
      265,  264,  268,  265,    0,    0,  266,  267,    0,  264,
      268,  264,  268,  500,  266,  267,  619,    0,  585,    0,

      266,  264,  619,  270,  268,  269,  266,  267,  273,  269,
      270,  270,  268,  269,  268,  500,  273,  504,  275,  408,
      585,  274,    0,    0,  268,  270,  275,  269,  500,  274,
      273,  269,  270,  270,  274,  269,  276,  585,  273,  504,
      275,  408,    0,  274,  276,  270,  277,  269,  275,  276,
      273,  274,  408,  278,  277,  504,  274,  279,  276,  280,
      275,  278,    0,  274,  281,  279,  276,  280,  277,  407,
      281,  276,  281,    0,  282,  278,  277,    0,  276,  279,
      410,  280,  282,  278,    0,    0,  281,  279,  277,  280,
      282,  407,  281,    0,  281,  278,  282,  283,    0,  279,

      284,  280,  410,  407,  282,  283,  281,  285,  284,    0,
      284,  283,  282,  287,  410,  285,  282,    0,    0,  283,
        0,  287,  284,    0,  285,  506,  286,  283,  288,  285,
      284,    0,  284,  283,  286,  287,  288,  285,  288,  283,
      286,    0,  284,  287,  290,    0,  285,  506,  286,  285,
      288,  509,  290,  289,  506,  287,  286,  289,  288,  290,
      288,  289,  286,  301,    0,  511,  290,    0,  286,  291,
      288,  301,    0,  509,  290,  289,  291,  291,    0,  289,
      303,  290,  305,  289,  302,  301,  290,  511,  303,  509,
      305,  291,  302,  301,    0,  289,  516,  302,  291,  291,

      511,  306,  303,    0,  305,  301,  302,  304,  307,  306,
      303,  291,  305,  590,  302,  304,  307,    0,  516,  302,
      304,    0,  303,  306,  305,  584,  302,    0,    0,  304,
      307,  306,  309,  308,  516,  590,  311,  304,  307,  308,
      309,  308,  304,  306,  311,    0,  311,  584,  309,  304,
      307,  310,  590,    0,  309,  308,    0,  589,  311,  310,
      584,  308,  309,  308,    0,  310,  311,  635,  311,  312,
      309,    0,  314,  310,  309,  308,  313,  312,  311,  589,
      314,  310,  621,    0,  313,    0,  312,  310,    0,  635,
      313,  312,  589,  310,  314,  315,  635,    0,  313,  312,

        0,    0,  314,  315,  621,  315,  313,    0,  312,    0,
      621,  312,  313,    0,  314,    0,  316,  315,  313,    0,
      316,  317,  318,  320,  316,  315,  319,  315,  317,  317,
      318,  320,  322,    0,  319,    0,    0,  315,  316,  319,
      322,    0,  316,  317,  318,  320,  316,  321,  319,  323,
      317,  317,  318,  320,  322,  321,  319,  323,  316,    0,
      321,  319,  322,  317,  318,  320,  636,    0,  319,  321,
      324,  323,  325,    0,  322,  326,    0,  321,  324,  323,
      325,  326,  321,  326,    0,  327,    0,    0,  636,  321,
        0,  323,  324,  327,  325,  636,  328,  326,  329,    0,

      324,  327,  325,  326,  328,  326,  329,  327,  329,    0,
      328,    0,  324,    0,  325,  327,    0,  326,  328,    0,
      329,  331,    0,  327,    0,  330,  328,  327,  329,  331,
      329,  332,  328,  330,    0,  331,  333,    0,  328,  332,
      329,    0,  330,  331,  333,    0,  333,  330,    0,    0,
        0,  331,  336,  332,  335,  330,    0,  331,  333,  336,
      336,  332,  335,  331,  330,    0,  333,  330,  333,  335,
        0,  334,    0,  332,  336,  334,  335,  347,  333,  334,
        0,  336,  336,    0,  335,  347,    0,  348,    0,    0,
      349,  335,    0,  334,  336,  348,  335,  334,  349,  347,

      348,  334,    0,  350,    0,    0,  351,  347,    0,  348,
        0,  350,  349,  334,  351,    0,  350,  348,    0,  347,
      349,    0,  348,    0,    0,  350,    0,  352,  351,  348,
        0,  353,  349,  350,  354,  352,  351,    0,  350,  353,
      354,    0,  354,    0,  355,  350,    0,    0,  351,  352,
        0,    0,  355,  353,    0,    0,  354,  352,    0,    0,
      355,  353,  354,  356,  354,    0,  355,  358,    0,  352,
      357,  356,    0,  353,  355,  358,  354,  356,  357,    0,
      357,    0,  355,    0,  358,  356,  355,    0,    0,  358,
        0,    0,  357,  356,    0,  360,  359,  358,    0,  356,

      357,    0,  357,  360,  359,  356,  358,    0,    0,  358,
      359,  361,  357,    0,    0,    0,    0,  360,  359,  361,
      362,  361,  363,    0,  362,  360,  359,  364,  362,  363,
      363,    0,  359,  361,    0,  364,    0,  360,  359,    0,
        0,  361,  362,  361,  363,    0,  362,    0,  365,  364,
      362,  363,  363,  361,    0,  366,  365,  364,  367,  368,
        0,  365,  362,  366,  363,  369,  367,  368,    0,  364,
      365,  367,    0,  369,  370,    0,  371,  366,  365,    0,
      367,  368,  370,  365,  371,  366,    0,  369,  367,  368,
      365,    0,    0,  367,    0,  369,  370,  366,  371,    0,

      367,  368,  372,  373,  370,  375,  371,  369,  372,    0,
      372,  373,  374,  375,    0,  375,  370,    0,  371,  373,
      374,  376,    0,    0,  372,  373,  374,  375,    0,  376,
      372,  378,  372,  373,  374,  375,    0,  375,  376,  378,
        0,  373,  374,  376,  372,  373,    0,  375,  374,  379,
      377,  376,    0,  378,  374,    0,    0,  379,  377,  379,
      376,  378,    0,  376,  377,    0,    0,    0,  381,    0,
        0,  379,  377,  378,  380,    0,  381,  382,  380,  379,
      377,  379,  380,  381,  382,  382,  377,    0,    0,    0,
      381,  379,  377,    0,    0,    0,  380,    0,  381,  382,

      380,    0,    0,    0,  380,  381,  382,  382,    0,  411,
      381,    0,  412,  411,  413,    0,  380,  411,  413,  382,
      412,    0,  413,    0,    0,  412,    0,    0,    0,    0,
      417,  411,    0,    0,  412,  411,  413,    0,  417,  411,
      413,  414,  412,  414,  413,  416,    0,  412,    0,  414,
        0,  411,  417,  416,  412,  416,  413,    0,  415,    0,
      417,    0,  415,  414,    0,  414,  415,  416,  418,    0,
        0,  414,  417,  419,  420,  416,  418,  416,    0,  418,
      415,  419,  420,  414,  415,    0,    0,  416,  415,  421,
      418,    0,    0,    0,    0,  419,  420,  421,  418,  422,

      415,  418,    0,  419,  420,  423,    0,  422,  422,    0,
      418,  421,    0,  423,  424,  419,  420,    0,  424,  421,
      425,  422,  424,    0,  427,    0,  427,  423,  425,  422,
      422,  421,  427,  425,    0,  423,  424,    0,    0,    0,
      424,  422,  425,    0,  424,  426,  427,  423,  427,  426,
      425,  428,    0,  426,  427,  425,  424,    0,    0,  428,
        0,    0,  425,    0,  428,    0,  427,  426,  429,  430,
      431,  426,  429,  428,  432,  426,  429,  430,  431,  430,
        0,  428,  432,    0,    0,  432,  428,  426,    0,    0,
      429,  430,  431,  428,  429,  433,  432,  434,  429,  430,

      431,  430,    0,  433,  432,  434,  435,  432,    0,    0,
      429,  430,  431,  436,  435,    0,  432,  433,    0,  434,
        0,  436,  436,  438,    0,  433,    0,  434,  435,    0,
      437,  438,    0,    0,  437,  436,  435,  433,  437,  434,
        0,    0,    0,  436,  436,  438,    0,    0,  435,    0,
        0,  440,  437,  438,  439,  436,  437,    0,  439,  440,
      437,    0,  439,    0,  440,  438,    0,    0,    0,    0,
        0,    0,  437,  440,    0,  441,  439,    0,    0,  441,
      439,  440,    0,  441,  439,    0,  440,    0,    0,    0,
      442,    0,  442,  440,  444,    0,  439,  441,  442,  443,

      445,  441,  444,  443,  444,  441,    0,  443,  445,    0,
        0,    0,  442,    0,  442,    0,  444,  441,    0,    0,
      442,  443,  445,  446,  444,  443,  444,  447,    0,  443,
      445,  446,  442,    0,  446,  447,  444,    0,  448,    0,
      449,  443,  445,    0,    0,  446,  448,    0,  449,  447,
        0,  451,    0,  446,    0,  450,  446,  447,    0,  451,
      448,    0,  449,  450,  450,  446,    0,    0,  448,  447,
      449,    0,    0,  451,    0,    0,  453,  450,    0,  452,
      448,  451,  449,  452,  453,  450,  450,  452,    0,  453,
        0,    0,    0,  451,  456,    0,    0,  450,  453,    0,

      454,  452,  456,    0,  454,  452,  453,  456,  454,  452,
        0,  453,    0,    0,    0,  455,  456,  455,  453,    0,
        0,  452,  454,  455,  456,    0,  454,    0,    0,  456,
      454,    0,    0,  458,    0,    0,  456,  455,  459,  455,
      457,  458,  454,  458,  457,  455,  459,    0,  457,    0,
        0,  461,    0,    0,    0,  458,  460,  455,    0,  461,
      459,  462,  457,  458,  460,  458,  457,  460,  459,  462,
      457,    0,    0,  461,    0,  458,    0,  463,  460,  464,
      459,  461,  457,  462,    0,  463,  460,  464,  464,  460,
        0,  462,  465,  461,  466,    0,  465,    0,  460,  463,

      465,  464,  466,  462,    0,    0,    0,  463,    0,  464,
      464,    0,    0,    0,  465,    0,  466,  468,  465,  463,
        0,  464,  465,  467,  466,  468,    0,  467,    0,    0,
      468,  467,    0,  470,  465,  470,  466,    0,  469,  468,
      471,  470,  469,    0,  471,  467,  469,  468,  471,  467,
        0,    0,  468,  467,    0,  470,    0,  470,    0,  468,
      469,  472,  471,  470,  469,  467,  471,    0,  469,  472,
      471,  472,    0,    0,    0,  470,  473,  474,  475,  476,
      469,    0,  471,  472,  473,  474,  475,  476,  474,    0,
        0,  472,    0,  472,  477,    0,    0,    0,  473,  474,

      475,  476,  477,  472,  478,    0,  473,  474,  475,  476,
      474,    0,  478,  478,    0,  479,  477,    0,  473,  474,
      475,  476,    0,  479,  477,  480,  478,    0,    0,  480,
      481,    0,    0,  480,  478,  478,  477,  479,  481,    0,
      482,  484,    0,  481,  482,  479,  478,  480,  482,  484,
        0,  480,  481,    0,  484,  480,  483,  479,  483,    0,
      481,    0,  482,  484,  483,  481,  482,  480,    0,  485,
      482,  484,  481,  485,    0,    0,  484,  485,  483,  487,
      483,    0,  482,  484,  486,  488,  483,  487,    0,    0,
        0,  485,  486,  488,  486,  485,  488,    0,  483,  485,

      489,  487,  490,    0,    0,    0,  486,  488,  489,  487,
      490,  485,    0,    0,  486,  488,  486,  491,  488,    0,
        0,  487,  489,  494,  490,  491,  486,  488,    0,    0,
      489,  494,  490,  517,    0,    0,    0,    0,    0,  491,
      492,  517,  489,    0,  490,  494,  493,  491,  492,  492,
      493,    0,    0,  494,  493,  517,  518,    0,    0,  491,
        0,    0,  492,  517,  518,  494,    0,    0,  493,  518,
      492,  492,  493,  519,    0,  517,  493,  520,  518,    0,
        0,  519,  492,    0,  521,  520,  518,    0,  493,    0,
        0,  518,  521,    0,  522,  519,  521,    0,  518,  520,

      523,  522,  522,  519,    0,  524,  521,  520,  523,  525,
        0,    0,    0,  524,  521,  519,  522,  525,  521,  520,
        0,    0,  523,  522,  522,    0,  521,  524,    0,    0,
      523,  525,  527,  526,    0,  524,  522,  526,  529,  525,
      527,  526,  523,    0,    0,    0,  529,  524,  528,  530,
        0,  525,    0,    0,  527,  526,  528,  530,    0,  526,
      529,  528,  527,  526,  532,    0,    0,    0,  529,    0,
      528,  530,  532,  531,  527,  526,  532,  531,  528,  530,
      529,  531,    0,  528,    0,    0,  532,    0,    0,  533,
      528,  530,  534,    0,  532,  531,  533,  533,  532,  531,

      534,    0,  535,  531,    0,  536,  532,    0,  537,    0,
      535,  533,    0,  536,  534,  531,  537,    0,  533,  533,
        0,    0,  534,    0,  535,    0,    0,  536,    0,  538,
      537,  533,  535,  538,  534,  536,    0,  538,  537,    0,
      539,    0,    0,    0,  535,  540,  541,  536,  539,    0,
      537,  538,    0,  540,  541,  538,  542,    0,  540,  538,
        0,  543,  539,    0,  542,    0,    0,  540,  541,  543,
      539,  538,    0,  543,    0,  540,  541,  544,  542,    0,
      540,    0,  539,  543,  544,  544,  542,  540,  541,    0,
        0,  543,  545,  546,  547,  543,  549,    0,  542,  544,

      545,  546,  547,  543,  549,    0,  544,  544,    0,    0,
        0,    0,    0,    0,  545,  546,  547,  548,  549,  544,
      550,  548,  545,  546,  547,  548,  549,    0,  550,    0,
        0,    0,    0,  550,  545,  546,  547,    0,  549,  548,
        0,  551,  550,  548,  552,    0,  554,  548,    0,  551,
      550,    0,  552,    0,  554,  550,    0,    0,  554,  548,
        0,    0,  550,  551,    0,  553,  552,  556,  554,  553,
      555,  551,    0,  553,  552,  556,  554,  555,  555,    0,
      554,    0,    0,  551,    0,    0,  552,  553,  554,  556,
        0,  553,  555,  557,  558,  553,  559,  556,  561,  555,

      555,  557,  558,    0,  559,    0,  561,  553,    0,  556,
        0,    0,  555,    0,    0,  557,  558,  560,  559,  562,
      561,  560,  563,  557,  558,  560,  559,  562,  561,    0,
      563,    0,  562,    0,    0,  557,  558,    0,  559,  560,
      561,  562,    0,  560,  563,  564,    0,  560,  565,  562,
      566,    0,  563,  564,  562,  567,  565,  566,  566,  560,
      565,  562,    0,  567,  563,    0,  568,  564,    0,    0,
      565,    0,  566,  569,  568,  564,    0,  567,  565,  566,
      566,  569,  565,  571,    0,  567,    0,  564,  568,    0,
      565,  571,  566,    0,  570,  569,  568,  567,  570,  572,

        0,  573,  570,  569,    0,  571,    0,  572,  568,  573,
      574,    0,  572,  571,    0,  569,  570,    0,  574,    0,
      570,  572,    0,  573,  570,  571,    0,  576,    0,  572,
        0,  573,  574,    0,  572,  576,  570,  577,  575,  576,
      574,  572,  575,  573,  577,  577,  575,    0,  578,  576,
        0,    0,  574,    0,  579,  580,  578,  576,    0,  577,
      575,  576,  579,  580,  575,  581,  577,  577,  575,  576,
      578,    0,    0,  581,    0,    0,  579,  580,  578,  577,
      575,  592,    0,  594,  579,  580,  594,  581,    0,  592,
      578,  594,  593,    0,  582,  581,  579,  580,  582,  593,

      593,    0,  582,  592,    0,  594,    0,  581,  594,  595,
      596,  592,    0,  594,  593,    0,  582,  595,  596,  597,
      582,  593,  593,  592,  582,  594,    0,  597,    0,    0,
        0,  595,  596,    0,  593,  598,  582,    0,  600,  595,
      596,  597,  598,  598,    0,  599,  600,    0,  599,  597,
        0,  595,  596,  599,  601,    0,    0,  598,    0,    0,
      600,  597,  601,    0,  598,  598,    0,  599,  600,    0,
      599,  602,    0,  604,    0,  599,  601,  598,  602,  602,
      600,  604,  603,    0,  601,  603,  605,  599,    0,  606,
      603,    0,    0,  602,  605,  604,  601,  606,    0,    0,

      602,  602,    0,  604,  603,    0,    0,  603,  605,    0,
      607,  606,  603,  602,    0,  604,  605,  607,  607,  606,
        0,    0,    0,    0,  603,  609,  608,  610,  605,  608,
        0,  606,  607,  609,  608,  610,  611,    0,    0,  607,
      607,    0,  613,  611,  611,    0,    0,  609,  608,  610,
      613,  608,  607,  614,    0,  609,  608,  610,  611,    0,
        0,  614,    0,    0,  613,  611,  611,  609,  608,  610,
        0,  612,  613,    0,  612,  614,    0,  615,  611,  612,
      616,    0,  618,  614,  613,  615,  617,  616,  616,  617,
      618,    0,    0,  612,  617,  614,  612,    0,    0,  615,

        0,  612,  616,    0,  618,    0,    0,  615,  617,  616,
      616,  617,  618,  612,    0,  623,  617,  624,  625,  615,
        0,    0,  616,  623,  618,  624,  625,    0,  617,  623,
        0,    0,  625,  626,  628,    0,  627,  623,    0,  624,
      625,  626,  628,    0,  627,  623,    0,  624,  625,    0,
      627,  623,    0,    0,  625,  626,  628,  623,  627,  624,
      625,  630,    0,  626,  628,  629,  627,    0,    0,  630,
        0,    0,  627,  629,  631,  626,  628,    0,  627,  629,
        0,    0,  631,  630,  632,    0,    0,  629,  631,    0,
      634,  630,  632,    0,    0,  629,  631,  633,  634,    0,

      637,  629,    0,  630,  631,  633,  632,  629,  637,    0,
      631,  633,  634,  637,  632,  638,  631,    0,    0,  633,
      634,  639,  637,  638,    0,    0,  632,  633,  638,  639,
      637,    0,  634,  633,  639,  637,  640,  638,    0,  633,
      641,    0,  637,  639,  640,  638,  642,  645,  641,  640,
      638,  639,    0,  641,  642,  645,  639,  638,  640,  642,
        0,    0,  641,  639,  646,  647,  640,    0,  642,  645,
      641,  640,  646,  647,    0,  641,  642,  645,  640,    0,
        0,  642,  641,  648,    0,    0,  646,  647,  642,  645,
      649,  648,  650,    0,  646,  647,    0,    0,  649,    0,

      650,    0,    0,    0,    0,  648,  646,  647,    0,    0,
        0,    0,  649,  648,  650,    0,    0,    0,    0,    0,
      649,    0,  650,    0,    0,  648,    0,    0,    0,    0,
        0,    0,  649,    0,  650,  654,    0,    0,  654,  654,
      655,    0,    0,  655,  655,  656,  656,  656,  656,  656,
      657,    0,    0,  657,  657,  658,    0,  658,  658,  658,
      659,    0,  659,  659,  659,  660,    0,  660,  660,  660,
      661,    0,  661,    0,  661,  662,    0,  662,    0,  662,
      663,    0,  663,    0,  663,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,

      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[69] =
    {   0,
0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 1, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "./CoolLexer.flex"
#line 2 "./CoolLexer.flex"
#include <iostream>
#include <fstream>
#include <cstdio>
#include <string>

#include "CoolParser.h"
#include "CoolLexer.h"

#undef YY_DECL
#define YY_DECL int CoolLexer::yylex()
#define ERROR -1;

int comment_lvl = 0;

#line 1555 "CoolLexer.cpp"
/*Numbers*/
/*ALPHA*/
/*IDENTIFIERS*/
 
#line 1560 "CoolLexer.cpp"

#define INITIAL 0
#define STR 1
#define COMMENT_INLINE 2
#define COMMENT 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 41 "./CoolLexer.flex"



#line 1699 "CoolLexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (int) ((yy_c_buf_p) - (yytext_ptr));
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 652 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 651 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = (yy_more_len); yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 44 "./CoolLexer.flex"
{BEGIN(COMMENT_INLINE);}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 45 "./CoolLexer.flex"
{}
	YY_BREAK
case YY_STATE_EOF(COMMENT_INLINE):
#line 46 "./CoolLexer.flex"
{BEGIN(INITIAL);}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 47 "./CoolLexer.flex"
{lineno++;
                    BEGIN(INITIAL);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 51 "./CoolLexer.flex"
{comment_lvl++;
                BEGIN(COMMENT);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 53 "./CoolLexer.flex"
{ Error("Wrong comment close-bracket");
                     BEGIN(INITIAL); return ERROR; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 56 "./CoolLexer.flex"
{comment_lvl++;}
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 58 "./CoolLexer.flex"
{BEGIN(INITIAL);
                    Error("Error comment");}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 60 "./CoolLexer.flex"
{Error("Wrong comment close-bracket"); BEGIN(INITIAL);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 62 "./CoolLexer.flex"
{lineno++;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 63 "./CoolLexer.flex"
{}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 64 "./CoolLexer.flex"
{}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 65 "./CoolLexer.flex"
{comment_lvl--;
                if (comment_lvl == 0)
                BEGIN(INITIAL);}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 69 "./CoolLexer.flex"
{yymore();
               BEGIN(STR);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 71 "./CoolLexer.flex"
{Error("one_line_string");
        BEGIN(INITIAL);
        lineno++;
        return 0;}
	YY_BREAK
case YY_STATE_EOF(STR):
#line 75 "./CoolLexer.flex"
{return 0;} 
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 76 "./CoolLexer.flex"
{return 0;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 77 "./CoolLexer.flex"
{yymore();}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 78 "./CoolLexer.flex"
{yymore();}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 79 "./CoolLexer.flex"
{lineno++;
                yymore();}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 81 "./CoolLexer.flex"
{yymore();
                Escape();
                BEGIN(INITIAL);
                return TOKEN_STR;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 86 "./CoolLexer.flex"
return TOKEN_KW_CLASS;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 87 "./CoolLexer.flex"
return TOKEN_KW_ELSE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 88 "./CoolLexer.flex"
return TOKEN_KW_FALSE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 89 "./CoolLexer.flex"
return TOKEN_KW_FI;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 90 "./CoolLexer.flex"
return TOKEN_KW_IF;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 91 "./CoolLexer.flex"
return TOKEN_KW_IN;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 92 "./CoolLexer.flex"
return TOKEN_KW_INHERITS;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 93 "./CoolLexer.flex"
return TOKEN_KW_ISVOID;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 94 "./CoolLexer.flex"
return TOKEN_KW_LET;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 95 "./CoolLexer.flex"
return TOKEN_KW_LOOP;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 96 "./CoolLexer.flex"
return TOKEN_KW_POOL;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 97 "./CoolLexer.flex"
return TOKEN_KW_THEN;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 98 "./CoolLexer.flex"
return TOKEN_KW_WHILE;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 99 "./CoolLexer.flex"
return TOKEN_KW_CASE;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 100 "./CoolLexer.flex"
return TOKEN_KW_ESAC;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 101 "./CoolLexer.flex"
return TOKEN_KW_NEW;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 102 "./CoolLexer.flex"
return TOKEN_KW_OF;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 103 "./CoolLexer.flex"
return TOKEN_KW_NOT;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 104 "./CoolLexer.flex"
return TOKEN_KW_TRUE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 105 "./CoolLexer.flex"
return TOKEN_IDENT_TYPE;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 106 "./CoolLexer.flex"
return TOKEN_IDENT_OBJECT;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 107 "./CoolLexer.flex"
return TOKEN_IDENT_OTHER;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 108 "./CoolLexer.flex"
return TOKEN_DARROW;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 109 "./CoolLexer.flex"
return TOKEN_ASSIGN;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 110 "./CoolLexer.flex"
return TOKEN_MULT;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 111 "./CoolLexer.flex"
return TOKEN_PLUS;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 112 "./CoolLexer.flex"
return TOKEN_MINUS;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 113 "./CoolLexer.flex"
return TOKEN_DIV;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 114 "./CoolLexer.flex"
return TOKEN_EQ;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 115 "./CoolLexer.flex"
return TOKEN_LESS;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 116 "./CoolLexer.flex"
return TOKEN_MORE;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 117 "./CoolLexer.flex"
return TOKEN_LE;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 118 "./CoolLexer.flex"
return TOKEN_ME;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 119 "./CoolLexer.flex"
return TOKEN_L_PARENT;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 120 "./CoolLexer.flex"
return TOKEN_R_PARENT;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 121 "./CoolLexer.flex"
return TOKEN_L_BRACKET;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 122 "./CoolLexer.flex"
return TOKEN_R_BRACKET;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 123 "./CoolLexer.flex"
return TOKEN_L_BRACE;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 124 "./CoolLexer.flex"
return TOKEN_R_BRACE;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 125 "./CoolLexer.flex"
return TOKEN_DOT;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 126 "./CoolLexer.flex"
return TOKEN_SEMICOLON;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 127 "./CoolLexer.flex"
return TOKEN_COLON;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 128 "./CoolLexer.flex"
return TOKEN_COMMA;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 129 "./CoolLexer.flex"
return TOKEN_TILDA;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 130 "./CoolLexer.flex"
return TOKEN_AT;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 131 "./CoolLexer.flex"
return TOKEN_INT;
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 134 "./CoolLexer.flex"
lineno++;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 135 "./CoolLexer.flex"
{/* skip spaces */}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 136 "./CoolLexer.flex"
Error("unrecognized character");
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 138 "./CoolLexer.flex"
ECHO;
	YY_BREAK
#line 2139 "CoolLexer.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 63);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 652 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 63;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 652 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 651);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 138 "./CoolLexer.flex"


void CoolLexer::Error(const char* msg) const
{
    std::cerr << "Lexer error (line " << lineno << "): " << msg << ": lexeme '" << YYText() << "'\n";
    std::exit(YY_EXIT_FAILURE);
}

void CoolLexer::Escape(){
    const char *input = yytext;
    char *output = yytext;
    input++; // Skip opening '\"'
    while (*(input + 1) /* Skip closing '\"' */ ) {
        if (*input == '\\') {
            input++; // Skip '\\'
            switch (*input) {
                case 'n': *output++ = '\n'; break;
                case 't': *output++ = '\t'; break;
                case 'f': *output++ = '\f'; break;
                case 'b': *output++ = '\b'; break;
                default: *output++ = *input;
            }
        } else {
            *output++ = *input;
        }
        input++;
    }
    *output = '\0';
    std::string str = yytext;
    std::cout <<"CODE_SYMBOL:  ";
    for(char ch : str){
        std::cout << static_cast<int>(ch) << " ";
    }
    std::cout << "\n";
}
